service: twitter
frameworkVersion: "2"

plugins:
  - serverless-appsync-plugin
  - serverless-iam-roles-per-function
  - serverless-export-env
  - serverless-layers
  - serverless-plugin-log-retention

provider:
  name: aws
  runtime: nodejs12.x
  region: eu-west-1
  environment:
    STAGE: ${self:custom.stage}
    AWS_NODEJS_CONNECTION_REUSE_ENABLED: "1"

package:
  exclude:
    - package-lock.json
    - package.json

custom:
  region: ${opt:region, self:provider.region}
  stage: ${opt:stage, self:provider.stage}
  appSync:
    - ${file(serverless.appsync-api.yml)}
  serverless-layers:
    layersDeploymentBucket: ${ssm:/twitterappsync/${self:custom.stage}/layer-deployment-bucket}
  logRetentionInDays: 1
  appSyncCaching:
    default:
    # prod:
    #   behavior: PER_RESOLVER_CACHING
    #   ttl: 3600
    #   type: LARGE

functions:
  confirmUserSignup:
    handler: functions/confirm-user-signup.handler
    environment:
      USERS_TABLE: !Ref UsersTable
    iamRoleStatements:
      - Effect: Allow
        Action: dynamodb:PutItem
        Resource: !GetAtt UsersTable.Arn

  getImageUploadUrl:
    handler: functions/get-upload-url.handler
    environment:
      BUCKET_NAME: !Ref AssetsBucket
    iamRoleStatements:
      - Effect: Allow
        Action:
          - s3:PutObject
          - s3:PutObjectAcl
        Resource: !Sub ${AssetsBucket.Arn}/*

  tweet:
    handler: functions/tweet.handler
    environment:
      USERS_TABLE: !Ref UsersTable
      TWEETS_TABLE: !Ref TweetsTable
      TIMELINES_TABLE: !Ref TimelinesTable
    iamRoleStatements:
      - Effect: Allow
        Action: dynamodb:UpdateItem
        Resource: !GetAtt UsersTable.Arn
      - Effect: Allow
        Action: dynamodb:PutItem
        Resource:
          - !GetAtt TweetsTable.Arn
          - !GetAtt TimelinesTable.Arn

  retweet:
    handler: functions/retweet.handler
    environment:
      USERS_TABLE: !Ref UsersTable
      TWEETS_TABLE: !Ref TweetsTable
      TIMELINES_TABLE: !Ref TimelinesTable
      RETWEETS_TABLE: !Ref RetweetsTable
    iamRoleStatements:
      - Effect: Allow
        Action: dynamodb:GetItem
        Resource: !GetAtt TweetsTable.Arn
      - Effect: Allow
        Action: dynamodb:UpdateItem
        Resource:
          - !GetAtt TweetsTable.Arn
          - !GetAtt UsersTable.Arn
      - Effect: Allow
        Action: dynamodb:PutItem
        Resource:
          - !GetAtt TweetsTable.Arn
          - !GetAtt TimelinesTable.Arn
          - !GetAtt RetweetsTable.Arn

  unretweet:
    handler: functions/unretweet.handler
    environment:
      USERS_TABLE: !Ref UsersTable
      TWEETS_TABLE: !Ref TweetsTable
      TIMELINES_TABLE: !Ref TimelinesTable
      RETWEETS_TABLE: !Ref RetweetsTable
    iamRoleStatements:
      - Effect: Allow
        Action: dynamodb:GetItem
        Resource: !GetAtt TweetsTable.Arn
      - Effect: Allow
        Action: dynamodb:Query
        Resource: !Sub "${TweetsTable.Arn}/index/retweetsByCreator"
      - Effect: Allow
        Action: dynamodb:UpdateItem
        Resource:
          - !GetAtt TweetsTable.Arn
          - !GetAtt UsersTable.Arn
      - Effect: Allow
        Action: dynamodb:DeleteItem
        Resource:
          - !GetAtt TweetsTable.Arn
          - !GetAtt TimelinesTable.Arn
          - !GetAtt RetweetsTable.Arn

  reply:
    handler: functions/reply.handler
    environment:
      USERS_TABLE: !Ref UsersTable
      TWEETS_TABLE: !Ref TweetsTable
      TIMELINES_TABLE: !Ref TimelinesTable
    iamRoleStatements:
      - Effect: Allow
        Action: dynamodb:GetItem
        Resource: !GetAtt TweetsTable.Arn
      - Effect: Allow
        Action: dynamodb:UpdateItem
        Resource:
          - !GetAtt TweetsTable.Arn
          - !GetAtt UsersTable.Arn
      - Effect: Allow
        Action: dynamodb:PutItem
        Resource:
          - !GetAtt TweetsTable.Arn
          - !GetAtt TimelinesTable.Arn

  distributeTweets:
    handler: functions/distribute-tweets.handler
    environment:
      RELATIONSHIPS_TABLE: !Ref RelationshipsTable
      TIMELINES_TABLE: !Ref TimelinesTable
    events:
      - stream:
          type: dynamodb
          arn: !GetAtt TweetsTable.StreamArn
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:PutItem
          - dynamodb:DeleteItem
          - dynamodb:BatchWriteItem
        Resource: !GetAtt TimelinesTable.Arn
      - Effect: Allow
        Action: dynamodb:Query
        Resource: !Sub "${RelationshipsTable.Arn}/index/byOtherUser"

  distributeTweetsToFollower:
    handler: functions/distribute-tweets-to-follower.handler
    environment:
      TWEETS_TABLE: !Ref TweetsTable
      TIMELINES_TABLE: !Ref TimelinesTable
      MAX_TWEETS: "100"
    events:
      - stream:
          type: dynamodb
          arn: !GetAtt RelationshipsTable.StreamArn
    # Only required if the auto generated name exceeds 64 characters
    iamRoleStatementsName: ${self:service}-${self:custom.stage}-distributeTweetsToFollower
    iamRoleStatements:
      - Effect: Allow
        Action: dynamodb:Query
        Resource:
          - !Sub "${TweetsTable.Arn}/index/byCreator"
          - !Sub "${TimelinesTable.Arn}/index/byDistributedFrom"
      - Effect: Allow
        Action:
          - dynamodb:BatchWriteItem
          - dynamodb:PutItem
          - dynamodb:DeleteItem
        Resource: !GetAtt TimelinesTable.Arn

  syncUsersToAlgolia:
    handler: functions/sync-users-to-algolia.handler
    events:
      - stream:
          type: dynamodb
          arn: !GetAtt UsersTable.StreamArn
    iamRoleStatements:
      - Effect: Allow
        Action: ssm:GetParameters
        Resource:
          - !Sub arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${self:custom.stage}/algolia-app-id
          - !Sub arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${self:custom.stage}/algolia-admin-key

  syncTweetsToAlgolia:
    handler: functions/sync-tweets-to-algolia.handler
    events:
      - stream:
          type: dynamodb
          arn: !GetAtt TweetsTable.StreamArn
    iamRoleStatements:
      - Effect: Allow
        Action: ssm:GetParameters
        Resource:
          - !Sub arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${self:custom.stage}/algolia-app-id
          - !Sub arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${self:custom.stage}/algolia-admin-key

  search:
    handler: functions/search.handler
    iamRoleStatements:
      - Effect: Allow
        Action: ssm:GetParameters
        Resource:
          - !Sub arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${self:custom.stage}/algolia-app-id
          - !Sub arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${self:custom.stage}/algolia-admin-key

  getHashTag:
    handler: functions/getHashTag.handler
    iamRoleStatements:
      - Effect: Allow
        Action: ssm:GetParameters
        Resource:
          - !Sub arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${self:custom.stage}/algolia-app-id
          - !Sub arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${self:custom.stage}/algolia-admin-key

  notify:
    handler: functions/notify.handler
    environment:
      GRAPHQL_API_URL: !GetAtt TwitterGraphQlApi.GraphQLUrl
      TWEETS_TABLE: !Ref TweetsTable
      USERS_TABLE: !Ref UsersTable
    events:
      - stream:
          type: dynamodb
          arn: !GetAtt TweetsTable.StreamArn
    iamRoleStatements:
      - Effect: Allow
        Action: appsync:GraphQL
        Resource: !Sub ${TwitterGraphQlApi.Arn}/* # Got from the template-update-stack on .serverless folder
      - Effect: Allow
        Action: dynamodb:GetItem
        Resource: !GetAtt TweetsTable.Arn
      - Effect: Allow
        Action: dynamodb:Query
        Resource: !Sub ${UsersTable.Arn}/index/byScreenName

  notifyLiked:
    handler: functions/notify-liked.handler
    environment:
      GRAPHQL_API_URL: !GetAtt TwitterGraphQlApi.GraphQLUrl
      TWEETS_TABLE: !Ref TweetsTable
    events:
      - stream:
          type: dynamodb
          arn: !GetAtt LikesTable.StreamArn
    iamRoleStatements:
      - Effect: Allow
        Action: appsync:GraphQL
        Resource: !Sub ${TwitterGraphQlApi.Arn}/* # Got from the template-update-stack on .serverless folder
      - Effect: Allow
        Action: dynamodb:GetItem
        Resource: !GetAtt TweetsTable.Arn

  notifyDmed:
    handler: functions/notify-dmed.handler
    environment:
      GRAPHQL_API_URL: !GetAtt TwitterGraphQlApi.GraphQLUrl
    events:
      - stream:
          type: dynamodb
          arn: !GetAtt DirectMessagesTable.StreamArn
    iamRoleStatements:
      - Effect: Allow
        Action: appsync:GraphQL
        Resource: !Sub ${TwitterGraphQlApi.Arn}/* # Got from the template-update-stack on .serverless folder

  sendDirectMessage:
    handler: functions/send-direct-message.handler
    environment:
      CONVERSATIONS_TABLE: !Ref ConversationsTable
      DIRECT_MESSAGES_TABLE: !Ref DirectMessagesTable
    iamRoleStatements:
      - Effect: Allow
        Action: dynamodb:PutItem
        Resource: !GetAtt DirectMessagesTable.Arn
      - Effect: Allow
        Action: dynamodb:UpdateItem
        Resource: !GetAtt ConversationsTable.Arn

  getTweetCreator:
    handler: functions/get-tweet-creator.handler
    environment:
      USERS_TABLE: !Ref UsersTable
    iamRoleStatements:
      - Effect: Allow
        Action: dynamodb:BatchGetItem
        Resource: !GetAtt UsersTable.Arn

resources:
  Resources:
    UsersTable: ${file(resources/dynamodb/UsersTable.yml):UsersTable}
    TweetsTable: ${file(resources/dynamodb/TweetsTable.yml):TweetsTable}
    TimelinesTable: ${file(resources/dynamodb/TimelinesTable.yml):TimelinesTable}
    LikesTable: ${file(resources/dynamodb/LikesTable.yml):LikesTable}
    RetweetsTable: ${file(resources/dynamodb/RetweetsTable.yml):RetweetsTable}
    RelationshipsTable: ${file(resources/dynamodb/RelationshipsTable.yml):RelationshipsTable}
    NotificationsTable: ${file(resources/dynamodb/NotificationsTable.yml):NotificationsTable}
    ConversationsTable: ${file(resources/dynamodb/ConversationsTable.yml):ConversationsTable}
    DirectMessagesTable: ${file(resources/dynamodb/DirectMessagesTable.yml):DirectMessagesTable}

    CognitoUserPool: ${file(resources/cognito/CognitoUserPool.yml):CognitoUserPool}
    UserPoolInvokeConfirmUserSignupLambdaPermission: ${file(resources/cognito/UserPoolInvokeConfirmUserSignupLambdaPermission.yml):UserPoolInvokeConfirmUserSignupLambdaPermission}
    WebUserPoolClient: ${file(resources/cognito/WebUserPoolClient.yml):WebUserPoolClient}

    AssetsBucket: ${file(resources/s3/AssetsBucket.yml):AssetsBucket}

  Outputs:
    AwsRegion:
      Value: ${self:custom.region}

    CognitoUserPoolId:
      Value: !Ref CognitoUserPool

    WebCognitoUserPoolClientId:
      Value: !Ref WebUserPoolClient

    ApiUrl:
      Value: !GetAtt TwitterGraphQlApi.GraphQLUrl # Got from CloudFormation template update stack (.serverless folder)
